// This file is now correct. Replace it to be certain.
document.addEventListener('DOMContentLoaded', function() {
    'use strict';
    const activeProject = sessionStorage.getItem('activeProject');
    if (!activeProject) { window.location.href = 'index.html'; return; }
    let projectData = {}; let allBlockers = []; let blockerModal; let statusPieChartInstance = null;
    const PROJECT_DATA_PREFIX = 'migrationDashboard_';
    const searchInput = document.getElementById('search-input'); const responsibleFilter = document.getElementById('responsible-filter'); const statusFilter = document.getElementById('status-filter'); const resetFiltersBtn = document.getElementById('reset-filters-btn');
    function initialize() { const modalElement = document.getElementById('blockerModal'); if (modalElement) blockerModal = new bootstrap.Modal(modalElement); loadDataAndRender(); addEventListeners(); document.querySelector('.navbar-brand').innerHTML = `<i class="bi bi-clipboard2-data-fill"></i> ${activeProject}`; document.getElementById('project-title').textContent = `${activeProject} - Blockers`; }
    function loadDataAndRender() { const rawData = localStorage.getItem(PROJECT_DATA_PREFIX + activeProject); if (!rawData) { alert('Error: Could not find data.'); return; } projectData = JSON.parse(rawData); allBlockers = projectData.blockers || []; populateFilters(); renderDashboard(); }
    function saveDataAndReRender() { projectData.blockers = allBlockers; projectData.lastModified = new Date().toISOString(); localStorage.setItem(PROJECT_DATA_PREFIX + activeProject, JSON.stringify(projectData)); populateFilters(); renderDashboard(); }
    function renderDashboard() { renderSummary(allBlockers); renderPieChart(allBlockers); applyFilters(); }
    function populateFilters() { const responsibles = ['All Responsible', ...new Set(allBlockers.map(item => item.Responsible).filter(Boolean).sort())]; responsibleFilter.innerHTML = responsibles.map(r => `<option value="${r}">${r}</option>`).join(''); const statuses = ['All Statuses', ...new Set(allBlockers.map(item => item['Solution Status']).filter(Boolean).sort())]; statusFilter.innerHTML = statuses.map(s => `<option value="${s}" class="text-capitalize">${s}</option>`).join(''); }
    function applyFilters() { const searchTerm = searchInput.value.toLowerCase(); const responsible = responsibleFilter.value; const status = statusFilter.value; let filteredData = allBlockers.filter(item => { const matchesSearch = (item['Blocker Name'] || '').toLowerCase().includes(searchTerm); const matchesResponsible = (responsible === 'All Responsible' || item.Responsible === responsible); const matchesStatus = (status === 'All Statuses' || item['Solution Status'] === status); return matchesSearch && matchesResponsible && matchesStatus; }); renderTable(filteredData); }
    function renderSummary(data) { const statusCounts = data.reduce((acc, item) => { const status = String(item['Solution Status'] || 'open').toLowerCase().replace(' ', '_'); acc[status] = (acc[status] || 0) + 1; return acc; }, { open: 0, in_progress: 0, resolved: 0 }); document.getElementById('total-blockers').textContent = data.length; document.getElementById('open-blockers').textContent = statusCounts.open || 0; document.getElementById('inprogress-blockers').textContent = statusCounts.in_progress || 0; document.getElementById('resolved-blockers').textContent = statusCounts.resolved || 0; }
    function renderPieChart(data) { const ctx = document.getElementById('status-pie-chart')?.getContext('2d'); if (!ctx) return; const statusCounts = data.reduce((acc, item) => { const status = String(item['Solution Status'] || 'open').toLowerCase(); acc[status] = (acc[status] || 0) + 1; return acc; }, {}); const chartConfig = { type: 'doughnut', data: { labels: Object.keys(statusCounts).map(l => l.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase())), datasets: [{ data: Object.values(statusCounts), backgroundColor: ['#dc3545', '#ffc107', '#198754', '#6c757d'], borderWidth: 1 }] }, options: { responsive: true, maintainAspectRatio: false } }; if (statusPieChartInstance) statusPieChartInstance.destroy(); statusPieChartInstance = new Chart(ctx, chartConfig); }
    function renderTable(data) { const tableBody = document.getElementById('blockers-table-body'); tableBody.innerHTML = ''; if (data.length === 0) { tableBody.innerHTML = '<tr><td colspan="7" class="text-center">No blockers match the current filters.</td></tr>'; return; } data.forEach(item => { const originalIndex = allBlockers.findIndex(originalItem => originalItem === item); const status = String(item['Solution Status'] || 'open').toLowerCase(); const priority = String(item.Priority || 'low').toLowerCase(); const row = `<tr><td>${item['Blocker Name'] || ''}</td><td>${item.Description || ''}</td><td>${item.Responsible || ''}</td><td>${item['Start Date'] || ''}</td><td><span class="badge text-capitalize bg-${priority === 'high' ? 'danger' : (priority === 'medium' ? 'warning text-dark' : 'primary')}">${priority}</span></td><td><span class="badge text-capitalize bg-${status === 'open' ? 'danger' : (status === 'in progress' ? 'warning text-dark' : 'success')}">${status}</span></td><td><button class="btn btn-sm btn-outline-primary edit-btn" data-index="${originalIndex}"><i class="bi bi-pencil"></i></button><button class="btn btn-sm btn-outline-danger delete-btn" data-index="${originalIndex}"><i class="bi bi-trash"></i></button></td></tr>`; tableBody.innerHTML += row; }); }
    function addEventListeners() { searchInput.addEventListener('input', applyFilters); responsibleFilter.addEventListener('change', applyFilters); statusFilter.addEventListener('change', applyFilters); resetFiltersBtn.addEventListener('click', () => { searchInput.value = ''; responsibleFilter.value = 'All Responsible'; statusFilter.value = 'All Statuses'; applyFilters(); }); document.getElementById('add-blocker-btn')?.addEventListener('click', showModalForAdd); document.getElementById('save-blocker-btn')?.addEventListener('click', handleFormSave); document.getElementById('blockers-table-body')?.addEventListener('click', function(e) { const target = e.target.closest('button'); if (!target) return; const index = target.dataset.index; if (target.classList.contains('edit-btn')) showModalForEdit(index); if (target.classList.contains('delete-btn')) handleDelete(index); }); }
    function showModalForAdd() { document.getElementById('blocker-form').reset(); document.getElementById('modal-blocker-index').value = ''; document.getElementById('blockerModalLabel').textContent = 'Add New Blocker'; blockerModal.show(); }
    function showModalForEdit(index) { const item = allBlockers[index]; if (!item) return; document.getElementById('blocker-form').reset(); document.getElementById('modal-blocker-index').value = index; document.getElementById('blockerModalLabel').textContent = 'Edit Blocker'; document.getElementById('modal-blocker-name').value = item['Blocker Name'] || ''; document.getElementById('modal-description').value = item.Description || ''; document.getElementById('modal-responsible').value = item.Responsible || ''; document.getElementById('modal-start-date').value = item['Start Date'] || ''; document.getElementById('modal-priority').value = String(item.Priority || 'low').toLowerCase(); document.getElementById('modal-status').value = String(item['Solution Status'] || 'open').toLowerCase().replace(' ', '_'); blockerModal.show(); }
    function handleFormSave() { const index = document.getElementById('modal-blocker-index').value; const blockerData = { 'Blocker Name': document.getElementById('modal-blocker-name').value, 'Description': document.getElementById('modal-description').value, 'Responsible': document.getElementById('modal-responsible').value, 'Start Date': document.getElementById('modal-start-date').value, 'Priority': document.getElementById('modal-priority').value, 'Solution Status': document.getElementById('modal-status').value.replace('_', ' '), }; if (index === '') { allBlockers.push(blockerData); } else { allBlockers[parseInt(index)] = blockerData; } saveDataAndReRender(); blockerModal.hide(); }
    function handleDelete(index) { const item = allBlockers[index]; if (confirm(`Are you sure you want to delete the blocker "${item['Blocker Name']}"?`)) { allBlockers.splice(index, 1); saveDataAndReRender(); } }
    initialize();
});
