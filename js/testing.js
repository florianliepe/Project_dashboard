// This file is now correct. Replace it to be certain.
document.addEventListener('DOMContentLoaded', () => {
    'use strict';
    const activeProject = sessionStorage.getItem('activeProject');
    if (!activeProject) { window.location.href = 'index.html'; return; }
    let projectData = {}; let testingData = []; let testModal; let statusPieChartInstance = null;
    const PROJECT_DATA_PREFIX = 'migrationDashboard_';
    const searchInput = document.getElementById('search-input'); const responsibleFilter = document.getElementById('responsible-filter'); const statusFilter = document.getElementById('status-filter'); const resetFiltersBtn = document.getElementById('reset-filters-btn');
    function parseDate(dateInput) { if (!dateInput) return null; if (typeof dateInput === 'number' && dateInput > 1) { const excelEpoch = new Date(1899, 11, 30); return new Date(excelEpoch.getTime() + dateInput * 24 * 60 * 60 * 1000); } if (typeof dateInput !== 'string') return null; if (dateInput.includes('.')) { const parts = dateInput.split('.'); if (parts.length === 3) return new Date(parts[2], parts[1] - 1, parts[0]); } const date = new Date(dateInput); if (!isNaN(date)) return date; return null; }
    function initialize() { const modalElement = document.getElementById('testModal'); if (modalElement) testModal = new bootstrap.Modal(modalElement); loadDataAndRender(); addEventListeners(); document.querySelector('.navbar-brand').innerHTML = `<i class="bi bi-box-seam"></i> ${activeProject}`; document.getElementById('project-title-main').textContent = `${activeProject} - Testing`; }
    function loadDataAndRender() { const rawData = localStorage.getItem(PROJECT_DATA_PREFIX + activeProject); if (!rawData) { alert('Error: Could not find data for the selected project.'); return; } projectData = JSON.parse(rawData); testingData = projectData.testing || []; populateFilters(); renderDashboard(); }
    function saveDataAndReRender() { projectData.testing = testingData; projectData.lastModified = new Date().toISOString(); localStorage.setItem(PROJECT_DATA_PREFIX + activeProject, JSON.stringify(projectData)); populateFilters(); renderDashboard(); }
    function renderDashboard() { renderSummaryCards(testingData); renderStatusPieChart(testingData); applyFilters(); }
    function populateFilters() { const responsibles = ['All Responsible', ...new Set(testingData.map(item => item.Responsible).filter(Boolean).sort())]; responsibleFilter.innerHTML = responsibles.map(r => `<option value="${r}">${r}</option>`).join(''); const statuses = ['All Statuses', ...new Set(testingData.map(item => item.Status).filter(Boolean).sort())]; statusFilter.innerHTML = statuses.map(s => `<option value="${s}" class="text-capitalize">${s}</option>`).join(''); }
    function applyFilters() { const searchTerm = searchInput.value.toLowerCase(); const responsible = responsibleFilter.value; const status = statusFilter.value; let filteredData = testingData.filter(item => { const matchesSearch = (item['Activity Title'] || '').toLowerCase().includes(searchTerm); const matchesResponsible = (responsible === 'All Responsible' || item.Responsible === responsible); const matchesStatus = (status === 'All Statuses' || item.Status === status); return matchesSearch && matchesResponsible && matchesStatus; }); renderTable(filteredData); }
    function renderSummaryCards(data) { const totalTests = data.length; const completedTests = data.filter(item => String(item.Status || '').toLowerCase() === 'completed').length; const inProgressTests = data.filter(item => String(item.Status || '').toLowerCase() === 'in progress').length; let totalProgress = data.reduce((sum, item) => sum + (Number(item.Progress) || 0), 0); const avgProgress = totalTests > 0 ? Math.round(totalProgress / totalTests) : 0; document.getElementById('total-tests').textContent = totalTests; document.getElementById('completed-tests').textContent = `${completedTests} (${totalTests > 0 ? Math.round((completedTests/totalTests)*100) : 0}%)`; document.getElementById('inprogress-tests').textContent = inProgressTests; document.getElementById('avg-progress').textContent = `${avgProgress}%`; }
    function renderStatusPieChart(data) { const ctx = document.getElementById('status-pie-chart')?.getContext('2d'); if (!ctx) return; const statusCounts = data.reduce((acc, item) => { const status = String(item.Status || 'Not Started').toLowerCase(); acc[status] = (acc[status] || 0) + 1; return acc; }, {}); const chartConfig = { type: 'doughnut', data: { labels: Object.keys(statusCounts).map(s => s.charAt(0).toUpperCase() + s.slice(1)), datasets: [{ data: Object.values(statusCounts), backgroundColor: ['#198754', '#0d6efd', '#6c757d', '#dc3545', '#ffc107'], borderColor: '#fff', borderWidth: 2 }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'right' } } } }; if (statusPieChartInstance) { statusPieChartInstance.destroy(); } statusPieChartInstance = new Chart(ctx, chartConfig); }
    function renderTable(data) { const tableBody = document.getElementById('testing-table-body'); tableBody.innerHTML = ''; if (data.length === 0) { tableBody.innerHTML = '<tr><td colspan="8" class="text-center">No tests match the current filters.</td></tr>'; return; } const today = new Date(); today.setHours(0, 0, 0, 0); data.forEach(item => { const originalIndex = testingData.findIndex(originalItem => originalItem === item); const progress = Number(item.Progress) || 0; const status = String(item.Status || '').toLowerCase(); let statusClass = { 'completed': 'status-completed', 'in progress': 'status-in-progress', 'blocked': 'status-blocked', 'overdue': 'status-overdue' }[status] || 'status-default'; let overdueClass = ''; const dueDate = parseDate(item['Due Date']); if (status !== 'completed' && dueDate && dueDate < today) overdueClass = 'table-danger'; const row = `<tr class="${overdueClass}"><td><strong>${item['Activity Title'] || ''}</strong></td><td style="white-space: pre-wrap;">${item.Description || ''}</td><td>${dueDate ? dueDate.toLocaleDateString('de-DE') : (item['Due Date'] || '')}</td><td class="text-capitalize ${statusClass}">${item.Status || 'N/A'}</td><td><div class="progress" style="height: 22px; font-size: 0.9em;"><div class="progress-bar" role="progressbar" style="width: ${progress}%;" aria-valuenow="${progress}">${progress}%</div></div></td><td>${item.Responsible || ''}</td><td>${item.Blocker || 'None'}</td><td class="text-center"><button class="btn btn-sm btn-outline-primary edit-btn mb-1" data-index="${originalIndex}"><i class="bi bi-pencil"></i></button> <button class="btn btn-sm btn-outline-danger delete-btn" data-index="${originalIndex}"><i class="bi bi-trash"></i></button></td></tr>`; tableBody.innerHTML += row; }); }
    function addEventListeners() { searchInput.addEventListener('input', applyFilters); responsibleFilter.addEventListener('change', applyFilters); statusFilter.addEventListener('change', applyFilters); resetFiltersBtn.addEventListener('click', () => { searchInput.value = ''; responsibleFilter.value = 'All Responsible'; statusFilter.value = 'All Statuses'; applyFilters(); }); document.getElementById('add-test-btn')?.addEventListener('click', showModalForAdd); document.getElementById('save-test-btn')?.addEventListener('click', handleFormSave); document.getElementById('testing-table-body')?.addEventListener('click', (e) => { const target = e.target.closest('button'); if (!target) return; const index = target.dataset.index; if (target.classList.contains('edit-btn')) showModalForEdit(index); if (target.classList.contains('delete-btn')) handleDelete(index); }); }
    function showModalForAdd() { document.getElementById('test-form').reset(); document.getElementById('modal-test-index').value = ''; document.getElementById('testModalLabel').textContent = 'Add New Test'; document.getElementById('modal-progress').value = 0; testModal.show(); }
    function showModalForEdit(index) { const item = testingData[index]; if (!item) return; document.getElementById('test-form').reset(); document.getElementById('modal-test-index').value = index; document.getElementById('testModalLabel').textContent = 'Edit Test'; document.getElementById('modal-activity-title').value = item['Activity Title'] || ''; document.getElementById('modal-description').value = item.Description || ''; document.getElementById('modal-due-date').value = item['Due Date'] || ''; document.getElementById('modal-status').value = String(item.Status || '').toLowerCase(); document.getElementById('modal-progress').value = item.Progress || 0; document.getElementById('modal-responsible').value = item.Responsible || ''; document.getElementById('modal-blocker').value = item.Blocker || ''; testModal.show(); }
    function handleFormSave() { const index = document.getElementById('modal-test-index').value; const testData = { 'Activity Title': document.getElementById('modal-activity-title').value, 'Description': document.getElementById('modal-description').value, 'Due Date': document.getElementById('modal-due-date').value, 'Status': document.getElementById('modal-status').value, 'Progress': document.getElementById('modal-progress').value, 'Responsible': document.getElementById('modal-responsible').value, 'Blocker': document.getElementById('modal-blocker').value, }; if (index === '') { testingData.push(testData); } else { testingData[parseInt(index)] = testData; } saveDataAndReRender(); testModal.hide(); }
    function handleDelete(index) { const item = testingData[index]; if (confirm(`Are you sure you want to delete the test "${item['Activity Title']}"?`)) { testingData.splice(index, 1); saveDataAndReRender(); } }
    initialize();
});
